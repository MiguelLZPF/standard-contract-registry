/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type ContractRecordStruct = {
  name: PromiseOrValue<BytesLike>;
  proxy: PromiseOrValue<string>;
  logic: PromiseOrValue<string>;
  admin: PromiseOrValue<string>;
  version: PromiseOrValue<BigNumberish>;
  logicCodeHash: PromiseOrValue<BytesLike>;
  extraData: PromiseOrValue<BytesLike>;
  timestamp: PromiseOrValue<BigNumberish>;
};

export type ContractRecordStructOutput = [
  string,
  string,
  string,
  string,
  number,
  string,
  string,
  BigNumber
] & {
  name: string;
  proxy: string;
  logic: string;
  admin: string;
  version: number;
  logicCodeHash: string;
  extraData: string;
  timestamp: BigNumber;
};

export interface ContractRegistryInterface extends utils.Interface {
  functions: {
    "changeRegisteredAdmin(bytes32,address)": FunctionFragment;
    "editExtraData(bytes32,bytes)": FunctionFragment;
    "getMyRecords()": FunctionFragment;
    "getRecord(bytes32,address,uint16)": FunctionFragment;
    "getSystemRecords()": FunctionFragment;
    "owner()": FunctionFragment;
    "register(bytes32,address,address,uint16,bytes32,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "update(bytes32,address,address,address,uint16,bytes32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeRegisteredAdmin"
      | "editExtraData"
      | "getMyRecords"
      | "getRecord"
      | "getSystemRecords"
      | "owner"
      | "register"
      | "renounceOwnership"
      | "transferOwnership"
      | "update"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeRegisteredAdmin",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "editExtraData",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyRecords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemRecords",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeRegisteredAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editExtraData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSystemRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "AdminChanged(bytes32,address,address)": EventFragment;
    "ExtraDataUpdated(bytes32,bytes,bytes)": EventFragment;
    "NewRecord(bytes32,address,address,uint16,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtraDataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRecord"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AdminChangedEventObject {
  name: string;
  oldAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface ExtraDataUpdatedEventObject {
  name: string;
  oldExtraData: string;
  newExtraData: string;
}
export type ExtraDataUpdatedEvent = TypedEvent<
  [string, string, string],
  ExtraDataUpdatedEventObject
>;

export type ExtraDataUpdatedEventFilter =
  TypedEventFilter<ExtraDataUpdatedEvent>;

export interface NewRecordEventObject {
  name: string;
  proxy: string;
  logic: string;
  version: number;
  logicCodeHash: string;
}
export type NewRecordEvent = TypedEvent<
  [string, string, string, number, string],
  NewRecordEventObject
>;

export type NewRecordEventFilter = TypedEventFilter<NewRecordEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ContractRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContractRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeRegisteredAdmin(
      name: PromiseOrValue<BytesLike>,
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editExtraData(
      name: PromiseOrValue<BytesLike>,
      newExtraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMyRecords(
      overrides?: CallOverrides
    ): Promise<[string[]] & { latestRecords: string[] }>;

    getRecord(
      name: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, ContractRecordStructOutput] & {
        found: boolean;
        record: ContractRecordStructOutput;
      }
    >;

    getSystemRecords(
      overrides?: CallOverrides
    ): Promise<[string[]] & { latestRecords: string[] }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    register(
      name: PromiseOrValue<BytesLike>,
      proxy: PromiseOrValue<string>,
      logic: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      logicCodeHash: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update(
      name: PromiseOrValue<BytesLike>,
      proxy: PromiseOrValue<string>,
      logic: PromiseOrValue<string>,
      newAdmin: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      logicCodeHash: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  changeRegisteredAdmin(
    name: PromiseOrValue<BytesLike>,
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editExtraData(
    name: PromiseOrValue<BytesLike>,
    newExtraData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMyRecords(overrides?: CallOverrides): Promise<string[]>;

  getRecord(
    name: PromiseOrValue<BytesLike>,
    admin: PromiseOrValue<string>,
    version: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, ContractRecordStructOutput] & {
      found: boolean;
      record: ContractRecordStructOutput;
    }
  >;

  getSystemRecords(overrides?: CallOverrides): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  register(
    name: PromiseOrValue<BytesLike>,
    proxy: PromiseOrValue<string>,
    logic: PromiseOrValue<string>,
    version: PromiseOrValue<BigNumberish>,
    logicCodeHash: PromiseOrValue<BytesLike>,
    admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update(
    name: PromiseOrValue<BytesLike>,
    proxy: PromiseOrValue<string>,
    logic: PromiseOrValue<string>,
    newAdmin: PromiseOrValue<string>,
    version: PromiseOrValue<BigNumberish>,
    logicCodeHash: PromiseOrValue<BytesLike>,
    admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeRegisteredAdmin(
      name: PromiseOrValue<BytesLike>,
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    editExtraData(
      name: PromiseOrValue<BytesLike>,
      newExtraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMyRecords(overrides?: CallOverrides): Promise<string[]>;

    getRecord(
      name: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, ContractRecordStructOutput] & {
        found: boolean;
        record: ContractRecordStructOutput;
      }
    >;

    getSystemRecords(overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    register(
      name: PromiseOrValue<BytesLike>,
      proxy: PromiseOrValue<string>,
      logic: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      logicCodeHash: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      name: PromiseOrValue<BytesLike>,
      proxy: PromiseOrValue<string>,
      logic: PromiseOrValue<string>,
      newAdmin: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      logicCodeHash: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(bytes32,address,address)"(
      name?: PromiseOrValue<BytesLike> | null,
      oldAdmin?: PromiseOrValue<string> | null,
      newAdmin?: PromiseOrValue<string> | null
    ): AdminChangedEventFilter;
    AdminChanged(
      name?: PromiseOrValue<BytesLike> | null,
      oldAdmin?: PromiseOrValue<string> | null,
      newAdmin?: PromiseOrValue<string> | null
    ): AdminChangedEventFilter;

    "ExtraDataUpdated(bytes32,bytes,bytes)"(
      name?: PromiseOrValue<BytesLike> | null,
      oldExtraData?: PromiseOrValue<BytesLike> | null,
      newExtraData?: PromiseOrValue<BytesLike> | null
    ): ExtraDataUpdatedEventFilter;
    ExtraDataUpdated(
      name?: PromiseOrValue<BytesLike> | null,
      oldExtraData?: PromiseOrValue<BytesLike> | null,
      newExtraData?: PromiseOrValue<BytesLike> | null
    ): ExtraDataUpdatedEventFilter;

    "NewRecord(bytes32,address,address,uint16,bytes32)"(
      name?: PromiseOrValue<BytesLike> | null,
      proxy?: PromiseOrValue<string> | null,
      logic?: null,
      version?: PromiseOrValue<BigNumberish> | null,
      logicCodeHash?: null
    ): NewRecordEventFilter;
    NewRecord(
      name?: PromiseOrValue<BytesLike> | null,
      proxy?: PromiseOrValue<string> | null,
      logic?: null,
      version?: PromiseOrValue<BigNumberish> | null,
      logicCodeHash?: null
    ): NewRecordEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    changeRegisteredAdmin(
      name: PromiseOrValue<BytesLike>,
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editExtraData(
      name: PromiseOrValue<BytesLike>,
      newExtraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMyRecords(overrides?: CallOverrides): Promise<BigNumber>;

    getRecord(
      name: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemRecords(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      name: PromiseOrValue<BytesLike>,
      proxy: PromiseOrValue<string>,
      logic: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      logicCodeHash: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update(
      name: PromiseOrValue<BytesLike>,
      proxy: PromiseOrValue<string>,
      logic: PromiseOrValue<string>,
      newAdmin: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      logicCodeHash: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeRegisteredAdmin(
      name: PromiseOrValue<BytesLike>,
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editExtraData(
      name: PromiseOrValue<BytesLike>,
      newExtraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMyRecords(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRecord(
      name: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSystemRecords(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      name: PromiseOrValue<BytesLike>,
      proxy: PromiseOrValue<string>,
      logic: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      logicCodeHash: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update(
      name: PromiseOrValue<BytesLike>,
      proxy: PromiseOrValue<string>,
      logic: PromiseOrValue<string>,
      newAdmin: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      logicCodeHash: PromiseOrValue<BytesLike>,
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
