/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ExampleOwnerV2Interface extends utils.Interface {
  contractName: "ExampleOwnerV2";
  functions: {
    "changeOwner(address)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "newFunction()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newFunction",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newFunction",
    data: BytesLike
  ): Result;

  events: {
    "OwnerSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerSet"): EventFragment;
}

export type OwnerSetEvent = TypedEvent<
  [string, string],
  { oldOwner: string; newOwner: string }
>;

export type OwnerSetEventFilter = TypedEventFilter<OwnerSetEvent>;

export interface ExampleOwnerV2 extends BaseContract {
  contractName: "ExampleOwnerV2";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExampleOwnerV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    newFunction(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  changeOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  newFunction(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    changeOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    newFunction(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnerSet(address,address)"(
      oldOwner?: string | null,
      newOwner?: string | null
    ): OwnerSetEventFilter;
    OwnerSet(
      oldOwner?: string | null,
      newOwner?: string | null
    ): OwnerSetEventFilter;
  };

  estimateGas: {
    changeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    newFunction(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newFunction(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
